library(chron)
library(dplyr)
library(itertools)
##########Methods##############
# some functions which are handy for plotting heatmaps of correlation matrices
#
# Get lower triangle of the correlation matrix
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
reorder_cormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
####
# function to detect local maxima
#
which.peaks <- function(x,partial=TRUE,decreasing=FALSE){
if (decreasing){
if (partial){
which(diff(c(FALSE,diff(x)>0,TRUE))>0)
}else {
which(diff(diff(x)>0)>0)+1
}
}else {
if (partial){
which(diff(c(TRUE,diff(x)>=0,FALSE))<0)
}else {
which(diff(diff(x)>=0)<0)+1
}
}
}
########
# function to add zero output for days without production
#
addLevel <- function(x, newlevel=NULL) {
if(is.factor(x)) {
if (is.na(match(newlevel, levels(x))))
return(factor(x, levels=c(levels(x), newlevel)))
}
return(x)
}
#########
#########
#function to add values from another column to given column, where null
#
fill_na <- function(col_to_fill, col_for_replace){
for(val in as.list(enumerate(col_to_fill))){
if(is.na(val$value)){
col_to_fill[val$index] <- col_for_replace[val$index]
}
}
return(col_to_fill)
}
############END#################
#~~#
#Importing Data
#~~#
Production_Orders_from_Access <- read_excel("Data/Production Orders from Access.xlsx")
View(Production_Orders_from_Access)
Choco.full <- Production_Orders_from_Access
#The time related variables have been parsed by R with dates
#and, as all the dates are set in the 1800's
#They are obviously very wrong
#Stripping the date from the time variables
Choco.full$`Basic Start time` <- format(Choco.full$`Basic Start time`, "%H:%M:%S")
Choco.full$`Basic Finish Time` <- format(Choco.full$`Basic Finish Time`, "%H:%M:%S")
Choco.full$`Scheduled Start Time` <- format(Choco.full$`Scheduled Start Time`, "%H:%M:%S")
Choco.full$`Scheduled Finish Time` <- format(Choco.full$`Scheduled Finish Time`, "%H:%M:%S")
Choco.full$`Actual Start Time` <- format(Choco.full$`Actual Start Time`, "%H:%M:%S")
Choco.full$`Actual Confirmed Finish Time` <- format(Choco.full$`Actual Confirmed Finish Time`, "%H:%M:%S")
#~~#
#Subsetting Data
#~~#
#Reducing to -000s materials
Choco.00s <- subset(Choco.full, grepl("^.+(000)$", Material))
View(Choco.00s)
#Reducing to my plants - PL01 and GB30
Choco.Plants <- subset(Choco.00s, grepl("(PL01|GB30)$", Plant))
View(Choco.Plants)
#Writing Subset for Tableau Analysis
#RAN
write.csv(Choco.Plants, file = "SubsetData.csv")
#~~#
#Dropping Un-needed data sets
#~~#
rm(Choco.full)
rm(Choco.00s)
#~~#
#Cleaning the Data
#~~#
#There are variables for both "Actual Finish Date"
#and "Actual confirmed finish date"
#These are non-identical, and although they are usually missing in the same row
#they aren't always
#I'll be filling those where the confirmed is missing with the non confirmed date
#and then dropping the "actual finish date" variable
fill_na(Choco.Plants$`Actual Confirmed Finish Date`, Choco.Plants$`Actual finish date`)
#Searching for missing values
sum(is.na(Choco.Plants))
#25788 missings
#most of these are in the "Del Flag" column
#a flag boolean for deletions, in a data set with very few deletions
## Reviewing high interest clumns for missings
sum(is.na(Choco.Plants$`Order Number`))
#no missings
sum(is.na(Choco.Plants$Plant))
#none
sum(is.na(Choco.Plants$`Prod Line`))
#none
sum(is.na(Choco.Plants$Material))
#none
#Still 7459 missings, almost all were in Del Flag
sum(is.na(Choco.Plants$`Actual start date`) + is.na(Choco.Plants$`Actual finish date`))
#Here are another 4939, 2520 remaining
sum(is.na(Choco.Plants$`Actual Confirmed Finish Date`))
#2520 missings, found them
#So our columns with missings are
#DelFlag, Actual Start Date, Actual finish Date
#and Actual Confirmed Finish date
#double check
sum(is.na(Choco.Plants$`Del Flag`)+is.na(Choco.Plants$`Actual start date`) +
is.na(Choco.Plants$`Actual finish date`) +is.na(Choco.Plants$`Actual Confirmed Finish Date`))
#Yepo, here they all are
#Treating missings in Del Flag
#This seems to be simple boolean flag, filled only when observed
#so that's how I'm ging to fix it
#DO NOT RE-RUN
for(i in 1:nrow(Choco.Plants)){
if(is.na(Choco.Plants$`Del Flag`[i]) == TRUE) {
Choco.Plants$`Del Flag`[i] <- 0
} else {
Choco.Plants$`Del Flag`[i] <- 1
}
}
sum(is.na(Choco.Plants$`Del Flag`))
#No more NA's in Del Flag
##Filling NAs in Actual Start Date
#And Adding a boolean flag for filled observations
Choco.Plants$Imputed_ASD
for(i in 1:nrow(Choco.Plants)){
if(is.na(Choco.Plants$`Actual start date`[i])){
Choco.Plants$Imputed_ASD[i] <- 1
} else{
Choco.Plants$Imputed_ASD[i] <- 0
}
}
Choco.Plants$`Actual start date` <- fill_na(Choco.Plants$`Actual start date`, Choco.Plants$`Scheduled Start Date`)
##Filling NAs in "Actual Finish Data"
###And adding boolean flag for filled observations
Choco.Plants$Imputed_AFD
for(i in 1:nrow(Choco.Plants)){
if(is.na(Choco.Plants$`Actual finish date`[i])){
Choco.Plants$Imputed_AFD[i] <- 1
} else{
Choco.Plants$Imputed_AFD[i] <- 0
}
}
Choco.Plants$`Actual finish date` <- fill_na(Choco.Plants$`Actual finish date`, Choco.Plants$`Scheduled Finish Date`)
## Filling NAs in "Actual Confirmed Finish Date"
### And creating boolean flag for filled positions
Choco.Plants$Imputed_ACFD
for(i in 1:nrow(Choco.Plants)){
if(is.na(Choco.Plants$`Actual Confirmed Finish Date`[i])){
Choco.Plants$Imputed_ACFD[i] <- 1
} else{
Choco.Plants$Imputed_ACFD[i] <- 0
}
}
Choco.Plants$`Actual Confirmed Finish Date` <- fill_na(Choco.Plants$`Actual Confirmed Finish Date`, Choco.Plants$`Scheduled Finish Date`)
identical(Choco.Plants$Imputed_ACFD, Choco.Plants$Imputed_AFD)
identical(Choco.Plants$Imputed_ASD, Choco.Plants$Imputed_AFD)
#UoM is "constant", marking all units as KG, so it should be ignored
Choco.Plants$UoM <- NULL
Choco.Plants$day <- weekdays(Choco.Plants$Date)
#Date Variables
Choco.Plants$Date <- (Choco.Plants$`Basic Start Date`, format="%m/%d/%Y")
#Date Variables
Choco.Plants$Date <- (Choco.Plants$`Basic Start Date`)
Choco.Plants$day <- weekdays(Choco.Plants$Date)
#creating weekdays vector
weekdays1 <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
Choco.Plants$wDay <- factor((weekdays(Choco.Plants$`Basic Start Date`) %in% weekdays1), levels=c(TRUE, FALSE), labels=c('Weekday', 'Weekend'))
#~~#
#Importing Data
#~~#
Sys.setlocale(locale="es_ES.UTF-8")
Sys.setlocale("LC_ALL","English")
help("Sys.setlocale")
locale(
)
#creating weekdays vector
weekdays1 <- c('Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 'Frietag')
Choco.Plants$wDay <- factor((weekdays(Choco.Plants$`Basic Start Date`) %in% weekdays1), levels=c(TRUE, FALSE), labels=c('Weekday', 'Weekend'))
Choco.Plants$Order.Number <- Choco.Plants$`Order Number`
Choco.Plants$Prod.Line <- Choco.Plants$`Prod Line`
Choco.Plants$Total.Order.Quant <- Choco.Plants$`Total order quantity`
Choco.Plants$Del.Flag <- Choco.Plants$`Del Flag`
Choco.Plants$Basic.Start.Date <- Choco.Plants$`Basic Start Date`
Choco.Plants$`Order Number` <- NULL
Choco.Plants$`Prod Line` <- NULL
Choco.Plants$`Total order quantity` <- NULL
Choco.Plants$`Del Flag` <- NULL
Choco.Plants$`Basic Start Date` <- NULL
#Splitting Into two sets, Set PL01 and GB30
Choco.PL01 <- subset(Choco.Plants, grepl("PL01", Plant))
Choco.GB30 <- subset(Choco.Plants, grepl("GB30", Plant))
#Daily Orders
#Plant GB30
Choco.sumGB <- summaryBy(Order.Number ~ Prod.Line + Date + day, data = Choco.GB30,
FUN=c(length))
#Libraries
library(MASS)
library(foreign)
library(car)
library(zoo)
library(xts)
library(lubridate)
library(plyr)
library(reshape2)
library(ggplot2)
library(rpart)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(randomForest)
library(readxl)
library(doBy)
library(data.table)
library(chron)
library(dplyr)
library(itertools)
##########Methods##############
# some functions which are handy for plotting heatmaps of correlation matrices
#
# Get lower triangle of the correlation matrix
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
reorder_cormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
####
# function to detect local maxima
#
which.peaks <- function(x,partial=TRUE,decreasing=FALSE){
if (decreasing){
if (partial){
which(diff(c(FALSE,diff(x)>0,TRUE))>0)
}else {
which(diff(diff(x)>0)>0)+1
}
}else {
if (partial){
which(diff(c(TRUE,diff(x)>=0,FALSE))<0)
}else {
which(diff(diff(x)>=0)<0)+1
}
}
}
########
# function to add zero output for days without production
#
addLevel <- function(x, newlevel=NULL) {
if(is.factor(x)) {
if (is.na(match(newlevel, levels(x))))
return(factor(x, levels=c(levels(x), newlevel)))
}
return(x)
}
#########
#########
#function to add values from another column to given column, where null
#
fill_na <- function(col_to_fill, col_for_replace){
for(val in as.list(enumerate(col_to_fill))){
if(is.na(val$value)){
col_to_fill[val$index] <- col_for_replace[val$index]
}
}
return(col_to_fill)
}
############END#################
#~~#
#Importing Data
#~~#
Production_Orders_from_Access <- read_excel("Data/Production Orders from Access.xlsx")
View(Production_Orders_from_Access)
Choco.full <- Production_Orders_from_Access
#The time related variables have been parsed by R with dates
#and, as all the dates are set in the 1800's
#They are obviously very wrong
#Stripping the date from the time variables
Choco.full$`Basic Start time` <- format(Choco.full$`Basic Start time`, "%H:%M:%S")
Choco.full$`Basic Finish Time` <- format(Choco.full$`Basic Finish Time`, "%H:%M:%S")
Choco.full$`Scheduled Start Time` <- format(Choco.full$`Scheduled Start Time`, "%H:%M:%S")
Choco.full$`Scheduled Finish Time` <- format(Choco.full$`Scheduled Finish Time`, "%H:%M:%S")
Choco.full$`Actual Start Time` <- format(Choco.full$`Actual Start Time`, "%H:%M:%S")
Choco.full$`Actual Confirmed Finish Time` <- format(Choco.full$`Actual Confirmed Finish Time`, "%H:%M:%S")
#~~#
#Subsetting Data
#~~#
#Reducing to -000s materials
Choco.00s <- subset(Choco.full, grepl("^.+(000)$", Material))
View(Choco.00s)
#Reducing to my plants - PL01 and GB30
Choco.Plants <- subset(Choco.00s, grepl("(PL01|GB30)$", Plant))
View(Choco.Plants)
#Writing Subset for Tableau Analysis
#RAN
write.csv(Choco.Plants, file = "SubsetData.csv")
#~~#
#Dropping Un-needed data sets
#~~#
rm(Choco.full)
rm(Choco.00s)
#~~#
#Cleaning the Data
#~~#
#There are variables for both "Actual Finish Date"
#and "Actual confirmed finish date"
#These are non-identical, and although they are usually missing in the same row
#they aren't always
#I'll be filling those where the confirmed is missing with the non confirmed date
#and then dropping the "actual finish date" variable
fill_na(Choco.Plants$`Actual Confirmed Finish Date`, Choco.Plants$`Actual finish date`)
#Searching for missing values
sum(is.na(Choco.Plants))
#25788 missings
#most of these are in the "Del Flag" column
#a flag boolean for deletions, in a data set with very few deletions
## Reviewing high interest clumns for missings
sum(is.na(Choco.Plants$`Order Number`))
#no missings
sum(is.na(Choco.Plants$Plant))
#none
sum(is.na(Choco.Plants$`Prod Line`))
#none
sum(is.na(Choco.Plants$Material))
#none
#Still 7459 missings, almost all were in Del Flag
sum(is.na(Choco.Plants$`Actual start date`) + is.na(Choco.Plants$`Actual finish date`))
#Here are another 4939, 2520 remaining
sum(is.na(Choco.Plants$`Actual Confirmed Finish Date`))
#2520 missings, found them
#So our columns with missings are
#DelFlag, Actual Start Date, Actual finish Date
#and Actual Confirmed Finish date
#double check
sum(is.na(Choco.Plants$`Del Flag`)+is.na(Choco.Plants$`Actual start date`) +
is.na(Choco.Plants$`Actual finish date`) +is.na(Choco.Plants$`Actual Confirmed Finish Date`))
#Yepo, here they all are
#Treating missings in Del Flag
#This seems to be simple boolean flag, filled only when observed
#so that's how I'm ging to fix it
#DO NOT RE-RUN
for(i in 1:nrow(Choco.Plants)){
if(is.na(Choco.Plants$`Del Flag`[i]) == TRUE) {
Choco.Plants$`Del Flag`[i] <- 0
} else {
Choco.Plants$`Del Flag`[i] <- 1
}
}
sum(is.na(Choco.Plants$`Del Flag`))
#No more NA's in Del Flag
#All other NAs are in date columns
#I'll fill them with the scheduled start and finish dates
##Filling NAs in Actual Start Date
#And Adding a boolean flag for filled observations
Choco.Plants$Imputed_ASD
for(i in 1:nrow(Choco.Plants)){
if(is.na(Choco.Plants$`Actual start date`[i])){
Choco.Plants$Imputed_ASD[i] <- 1
} else{
Choco.Plants$Imputed_ASD[i] <- 0
}
}
Choco.Plants$`Actual start date` <- fill_na(Choco.Plants$`Actual start date`, Choco.Plants$`Scheduled Start Date`)
##Filling NAs in "Actual Finish Data"
###And adding boolean flag for filled observations
Choco.Plants$Imputed_AFD
for(i in 1:nrow(Choco.Plants)){
if(is.na(Choco.Plants$`Actual finish date`[i])){
Choco.Plants$Imputed_AFD[i] <- 1
} else{
Choco.Plants$Imputed_AFD[i] <- 0
}
}
Choco.Plants$`Actual finish date` <- fill_na(Choco.Plants$`Actual finish date`, Choco.Plants$`Scheduled Finish Date`)
## Filling NAs in "Actual Confirmed Finish Date"
### And creating boolean flag for filled positions
Choco.Plants$Imputed_ACFD
for(i in 1:nrow(Choco.Plants)){
if(is.na(Choco.Plants$`Actual Confirmed Finish Date`[i])){
Choco.Plants$Imputed_ACFD[i] <- 1
} else{
Choco.Plants$Imputed_ACFD[i] <- 0
}
}
Choco.Plants$`Actual Confirmed Finish Date` <- fill_na(Choco.Plants$`Actual Confirmed Finish Date`, Choco.Plants$`Scheduled Finish Date`)
#UoM is "constant", marking all units as KG, so it should be ignored
Choco.Plants$UoM <- NULL
#~~#
#Adding Variables for Analysis
#~~#
#Date Variables
Choco.Plants$Date <- (Choco.Plants$`Basic Start Date`)
Choco.Plants$day <- weekdays(Choco.Plants$Date)
#creating weekdays vector
weekdays1 <- c('Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 'Frietag')
Choco.Plants$wDay <- factor((weekdays(Choco.Plants$`Basic Start Date`) %in% weekdays1), levels=c(TRUE, FALSE), labels=c('Weekday', 'Weekend'))
#Changing Variable names so R doesn't HATE me
Choco.Plants$Order.Number <- Choco.Plants$`Order Number`
Choco.Plants$Prod.Line <- Choco.Plants$`Prod Line`
Choco.Plants$Total.Order.Quant <- Choco.Plants$`Total order quantity`
Choco.Plants$Del.Flag <- Choco.Plants$`Del Flag`
Choco.Plants$Basic.Start.Date <- Choco.Plants$`Basic Start Date`
Choco.Plants$`Order Number` <- NULL
Choco.Plants$`Prod Line` <- NULL
Choco.Plants$`Total order quantity` <- NULL
Choco.Plants$`Del Flag` <- NULL
Choco.Plants$`Basic Start Date` <- NULL
#Splitting Into two sets, Set PL01 and GB30
Choco.PL01 <- subset(Choco.Plants, grepl("PL01", Plant))
Choco.GB30 <- subset(Choco.Plants, grepl("GB30", Plant))
#Oh hey look
#Plant PL01 only has one production line
#So there is that
#Daily Orders
#Plant GB30
Choco.sumGB <- summaryBy(Order.Number ~ Prod.Line + Date + day, data = Choco.GB30,
FUN=c(length))
length(Choco.GB30$Prod.Line)
length(Choco.GB30$Date)
length(Choco.GB30$day)
length(Choco.GB30$Order.Number)
#Daily Orders
#Plant GB30
Choco.sumGB <- summaryBy(Order.Number ~ Prod.Line + Date + day, data = Choco.GB30, FUN=c(length))
class(Choco.GB30)
#Daily Orders
#Plant GB30
Choco.sumGB <- summaryBy(Order.Number ~ Prod.Line + Date + day, data = as.data.frame(Choco.GB30), FUN=c(length))
#Plant PL01
#Note that Prod line is dropped form the summary
#PL01 only has the one line
Choco.sumPL <- summaryBy(Order.Number ~ Date + day, data= as.data.frame(Choco.PL01), FUN = c(length))
#Orders by Weekday
Choco.sumGBWD <- summaryBy(Order.Number ~ day + Prod.Line, data = Choco.GB30,
FUN = c(length))
Choco.PL01 <- as.data.frame(Choco.PL01)
Choco.GB30 <- as.data.frame(Choco.GB30)
#Daily Orders
#Plant GB30
Choco.sumGB <- summaryBy(Order.Number ~ Prod.Line + Date + day, data = Choco.GB30, FUN=c(length))
#Plant PL01
#Note that Prod line is dropped form the summary
#PL01 only has the one line
Choco.sumPL <- summaryBy(Order.Number ~ Date + day, data= Choco.PL01, FUN = c(length))
#Orders by Weekday
Choco.sumGBWD <- summaryBy(Order.Number ~ day + Prod.Line, data = Choco.GB30,
FUN = c(length))
Choco.sumPLWD <- summaryBy(Order.Number ~ day, data= Choco.PL01,
FUN = c(length))
#Materials By Day/Prodline
Choco.sumGBMAT <- summaryBy(Material ~ day + Prod.Line, data=Choco.GB30,
FUN = c(length))
Choco.sumPLMAT <- summaryBy(Material ~day, data= Choco.PL01, FUN = c(length))
#Plotting Daily Orders
ggplot(Choco.sumGB, aes(x=Date, y=Order.Number.length, colour=Prod.Line)) +
geom_line() +
xlab("Date") + ylab ("# of Orders") +
ggtitle("Daily Number of Orders by Production Line")+
theme(axis.text.x = element_text(size = 6), axis.text.y = element_text(size = 6))
ggplot(Choco.sumPL, aes(x=Date, y=Order.Number.length)) +
geom_line() +
xlab("Date") + ylab ("# of Orders") +
ggtitle("Daily Number of Orders")+
theme(axis.text.x = element_text(size = 6), axis.text.y = element_text(size = 6))
#Creating a Facet Plot of Daily Orders
#Only for GB30
ggplot(Choco.sumGB, aes(x=Date, y=Order.Number.length)) +
geom_line(colour="chocolate") +facet_wrap(~Prod.Line)+
xlab("Date") + ylab ("# of Orders") +
ggtitle("Daily Number of Orders by Production Line")+
scale_x_date(labels = function(x) format(x, "%b-%y"))+
theme(axis.text.x = element_text(size = 6), axis.text.y = element_text(size = 6))
#Creating a Facet Plot of Daily Orders
#Only for GB30
ggplot(Choco.sumGB, aes(x=as.Date(Date), y=Order.Number.length)) +
geom_line(colour="chocolate") +facet_wrap(~Prod.Line)+
xlab("Date") + ylab ("# of Orders") +
ggtitle("Daily Number of Orders by Production Line")+
scale_x_date(labels = function(x) format(x, "%b-%y"))+
theme(axis.text.x = element_text(size = 6), axis.text.y = element_text(size = 6))
